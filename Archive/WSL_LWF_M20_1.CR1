'**************************************************************************************
'*                                                                                    *
'*   Programm:          WSL_LWF_M20.CS1                                               *
'*                      Langfristige Waldökosystem-Forschung LWF / WSL                *
'*   Logger:            Campbell CR1000                                               *
'*   Version:           V 2.0                                                         *
'*   Ersterstellung:    12.04.2012                                                    *
'*   letzte Aenderung:  29.03.2015                                                    *
'*   Autor:             Martin Zimmerli, SensAlpin GmbH                               *
'*                                                                                    *
'**************************************************************************************
'*
'*   Station:                WSL LWF-Station
'*   Stations-ID:            1
'*   Telefonnummer:          079 179 90 64
'*   PakBus-Adresse:         101
'*
'*
'*   Messungen:
'*   **********
'*   Lufttemperatur          TAIR [°C], Rotronic Hygroclip HC 2            (SE3, C6)
'*   rel. Feuchte            RHUM [%],  Rotronic Hygroclip HC 2            (SE2, C6)
'*   Windrichtung            DWND [deg], Campbell W200P                   (SE4, Ex2)
'*   Windgeschwindigkeit     VWND [m/s], Campbell A100R                         (P1)
'*   Niederschlag            PLUV [mm], Campbell ARG100 0.2mm Wippe             (P2)
'*   Globalstrahlung         SRAD [W/m2], Skye SKS1110                         (SE7)
'*   photosynth. akt. Str.   PAR  [umol/m2s], Skye SKP 210/I                   (SE8)
'*   UVB-Strahlung           UVB  [mW/m2], Skye SKU 430/I                   (Diff 3)
'*
'*   Multiplexer             Mux 1: AM16/32_1                (C1, C2 / SE9 ... SE12)
'*
'*                           Mux 2: AM16/32_2               (C3, C4 / SE13 ... SE16)
'*
'*   Batteriespannung        VBAT [V]
'*   Loggertermperatur       TLOG [°C]
'*
'*
'*   INPUT CHANNELS:
'*   --------------
'*   SE1:  -           SE2:  RHUM        SE3:  TAIR        SE4:  DWND
'*   SE5:  UVB High    SE6:  UVB Low     SE7:  SRAD        SE8:  PAR   
'*   SE9:  Odd H Mux1  SE10: Odd L Mux1  SE11: Even H Mux1 SE12: Even L Mux1
'*   SE13: Odd H Mux2  SE14: Odd L Mux2  SE15: Even H Mux2 SE16: Even L Mux2
'*   
'*   PULSE INPUT CHANNELS:
'*   --------------------
'*   P1:  VWND         P2:  PLUV
'*
'*   CONTROL PORTS:
'*   -------------
'*   C1:  CLK Mux 1    C2:  RES Mux 1    C3:  CLK Mux 2    C4:  RES Mux 2   
'*   C5:  -            C6:  PS TARH      C7:  -            C8:  -
'*
'*   Switched 12V:     GSM  (low = on)
'*
'*   EXCITATION CHANNELS:
'*   -------------------
'*   Ex1: -            Ex2: DWND          Ex3: -   
'*
'*
'*   Programmkonfiguration:
'*   **********************
'*   Station:               Kennung durch StationID
'*   Sensoren:              Ein-/Aus-Schalten der Messung von XXXX mit StatXXXX
'*                          - StatXXXX >= 1:   eingeschaltet
'*                          - StatXXXX  = 0:   ausgeschaltet
'*   Niederschlag:          PLUVcali:  Wippenvolumen in mm
'*   Globalstrahlung:       SRADcali:  1 / Empfindlichkeit [mV/W/m2]
'*   phot. akt. Strahlung:  PARcali:   1 / Empfindlichkeit [mV/umol/m2s]
'*   UVB-Strahlung:         UVBcali:   1000 / Empfindlichkeit [mV/W/m2]
'*
'*   
'*   Energieversorgung:
'*   ******************
'*   Solarspeisung 15W / 38Ah mit Laderegler SunSaver SS-6
'*
'*   Kommunikation / Datenablage:
'*   ****************************
'*   GSM:                   Cinterion MC52i Terminal
'*                          geschaltet ueber SW12V (low: EIN / high: AUS) 
'*                          im Normalbetrieb immer ein / Reset taeglich um 11:57 Uhr
'*
'*                          Bei tiefer Batteriespannung morgens um 05:00 Uhr
'*                          VBAT5h < VBATlim (default: 12.4V), wird das GSM-Modem
'*                          jeweils nur noch waehrend vier Zeitfenstern eingeschaltet
'*                          (default: 06:00-06:30/10:00-10:30/14:00-14:30/18:00-18:30).
'*                          Bei aktivem GPRS-Mode (siehe unten) ist das Modem dabei
'*                          die ersten 20 Minuten im CSD-Mode, danach wird fuer 
'*                          10 Minuten eine GPRS-Verbindung geoeffnet.
'*
'*   GPRS:                  falls StatFTP >= 1 oder StatTCP >= 1:
'*                          GPRS-Verbindung ist permanent offen und wird nur wahrend
'*                          vier Zeitfenstern fuer CSD-Verbindungn geschlossen
'*                          (default: 06:00-06:20/10:00-10:20/14:00-14:20/18:00-18:20).
'*
'*   FTP:                   falls StatFTP >= 1:
'*                          Alle 10 (cMETEOINT) Minuten wird eine Datenzeile ins 
'*                          lokale Datenfile USR:LocalData.dat geschrieben. 
'*                          Dieses wird mit einer Verzoegerung von FTP_Delay (Default:
'*                          5 Minuten) per FTP auf einen FTP-Server uebertragen.
'*                          Bei erfolgreicher Uebertragung wird das File geloescht,
'*                          ansonsten wird es stehen gelassen.
'*
'*   TCP-Callback:          falls StatTCP >= 1:
'*                          Von der Station aus wird eine TCP/IP-Verbindung zu einem
'*                          Loggernet-Server auf der Adresse TcpAddress:TcpPort
'*                          geoeffnet. Diese wird einmal stuendlich (hh:58 - hh:59)
'*                          sowie waehrend den GPRS-Ausschaltzeiten geschlossen.
'*
'*   Zeit:                  falls StatNTP > 0:
'*                          Die Loggerzeit wird einmal taeglich nach Aufbau der 
'*                          ersten GPRS-Verbindung nach Mitternacht mit dem NTP-Server
'*                          "pool.ntp.org" auf GMT+1 ohne Sommerzeit synchronisiert.
'*          
'*   Daten:				          Meteodaten (cMETEOINT = 10 Minuten):
'*								          Stations-ID, Lufttemperatur, Luftfeuchtigkeit,
'*                          Windgeschwindigkeit, Windrichtung, Windspitze, 
'*                          Niederschlag, Niederschlagssumme, Globalstrahlung, 
'*                          photosynthetisch aktive Strahlung, UVB-Strahlung
'*                          Batteriespannung, Loggertemperatur, Qualitaetsparameter
'*
'*								          Konfigurationsdaten (bei Aenderung der Konfiguration):
'*								          Stations-ID, Status, PLUVcali, SRADcali, 
'*                          PARCali, UVBCali
'*                          
'*   Konfiguration:         Die Konfigurationsparameter werden in zwei Files abgelegt
'*                          ("USR:Parameter.cal" / "USR:ConfigStrings.txt").
'*                          Bei jedem Neustart des Loggers werden die Parameter aus
'*                          diesen Files neu eingelesen. Sind diese nicht vorhanden,
'*                          so werden die Default-Werte aus SUBDefaultParameter /
'*                          SUBDefaultStrings uebernommen.
'*                          Nach jeder Aenderung der Konfigurationsparameter sollten
'*                          diese durch Setzen von FlagEnterConfig neu abgelegt werden.
'*
'*                          Jedesmal, wenn das Kalibrationsfile neu geschrieben wird,
'*                          wird zur Dokumentation der aktuellen Konfiguration eine
'*                          Zeile im Table der Konfigurationsdaten abgelegt.
'*
'*
'**************************************************************************************
'*                                                                                    *
'*   D E K L A R A T I O N                                                            *
'*                                                                                    *
'**************************************************************************************
SequentialMode

'--------------------------------------------------------------------------------------
'-   K O N S T A N T E N                                                              -
'--------------------------------------------------------------------------------------
Const cPROGSCAN        =       5
Const cSensorOff       =    -999  '* Code fuer nicht angeschlossene Sensoren

'*** Programm Konfiguration
Const cnSTATUS         =      11   '* Anzahl binaerer Status-Werte
Const cstVBATT         =       1   '*  - Binaerwert:      1
Const cstTARH          =       2   '*  - Binaerwert:      2
Const cstVWND          =       3   '*  - Binaerwert:      4
Const cstDWND          =       4   '*  - Binaerwert:      8
Const cstPLUV          =       5   '*  - Binaerwert:     16
Const cstSRAD          =       6   '*  - Binaerwert:     32
Const cstPAR           =       7   '*  - Binaerwert:     64
Const cstUVB           =       8   '*  - Binaerwert:    128
Const cstFTP           =       9   '*  - Binaerwert:    256
Const cstTCP           =      10   '*  - Binaerwert:    512
Const cstNTP           =      11   '*  - Binaerwert:   1024
Const cnPARAMETER      =      50
Const cnSTRINGS        =      10
Const cnSTRINGFILESIZE =     350
Const cnMAXUSRFILES    =      10

ConstTable
  Const cPROGVERS      =     2.0
  Const cMETEOINT      =      10   '* Speicherintervall der Meteodaten in Minuten
  Const cGSMRESET      =     717   '* Zeit des taeglichen GSM-Reset in Minuten
  Const cBAUDRATE      =  115200
  Const cFTP_Mode      =       8
 
  Const cDataFileName  =  "USR:LocalData.dat"
  Const cPARAMETERFILE =  "USR:Parameter.cal"
  Const cSTRINGFILE    =  "USR:ConfigStrings.txt"
EndConstTable 


'--------------------------------------------------------------------------------------
'-   V A R I A B L E N                                                                -
'--------------------------------------------------------------------------------------

'*** Stationskonfiguration
Public StationID As Long
Public ProgVers
Public StatusIn As Long

'*** Messgroessen:
Public VBATact
Public TLOGact
Public TAIRact
Public RHUMact
Public VWNDact
Public VWNDmax
Public DWNDact
Public PLUVact
Public SRADact
Public PARact
Public UVBact

'*** Programmsteuerung:
Public FlagMeteoData     As Boolean
Public FlagConfigData    As Boolean
Public FlagBatSave       As Boolean
Public FlagForceMeasure  As Boolean
Public FlagEnterStatus   As Boolean
Public FlagEnterConfig   As Boolean
Public FlagFTP           As Boolean
Public FlagPPPOpen       As Boolean
Public FlagPPPClose      As Boolean
Public FlagTCPOpen       As Boolean
Public FlagTCPClose      As Boolean
Public FlagTimeSync      As Boolean
Public FlagInit          As Long

'*** Programmkonfiguration:
Public Quality As Long
Public Status(cnSTATUS) As Long
 Alias Status(cstVBATT)  = StatBATT
 Alias Status(cstTARH)   = StatTARH
 Alias Status(cstVWND)   = StatVWND
 Alias Status(cstDWND)   = StatDWND
 Alias Status(cstPLUV)   = StatPLUV
 Alias Status(cstSRAD)   = StatSRAD
 Alias Status(cstPAR)    = StatPAR
 Alias Status(cstUVB)    = StatUVB
 Alias Status(cstFTP)    = StatFTP
 Alias Status(cstTCP)    = StatTCP
 Alias Status(cstNTP)    = StatNTP
Public PluvCali
Public SRadCali
Public PARCali
Public UVBCali
Public VBATlim

'*** Umrechnungen von Messgroessen:
Public PluvSum
Public Pluv10m
Public VBATmean
Public VBAT5h
Dim    TAIR
Dim    RHUM
Dim    VWND
Dim    DWND
Dim    SRAD
Dim    PAR
Dim    UVB
Dim    VBAT
Dim    TLOG

'***   FTP-Filetransfer
Dim    DataLine           As String * 500
Dim    DataFile           As Long
Public FTP_IP             As String * 50
Public FTP_User           As String * 30
Public FTP_Pwd            As String * 30
Public FTP_Delay          As Long
Public FTPFileName        As String * 100
Public FTPSendSuccess     As Boolean

'***   GPRS
Public pppOpenState       As Boolean
Dim    pppCloseSuccess    As Boolean
Dim    pppOpenResult      As String * 30
Public pppIPAddress       As String * 30
Public pppIPInfo          As String * 200
Dim    pppIP              As String * 200
Public TcpAddress         As String * 20
Public TcpPort            As Long
Public TCPOpenState       As Boolean
Dim    TCPSocket          As Long
Public NTPOffset          As Long

'***   Konfiguration GSM-Modem
Public FlagConfigGSM As Long
Public GSMCommandString As String * 100
Public GSMAnswer As String * 1000
Dim    SerialInput As String * 100

'***   Zeitsteuerung GPRS- / CSD-Mode
Public GPRSoff_Min        As Long
Public GPRSoff_H1         As Long
Public GPRSoff_H2         As Long
Public GPRSoff_H3         As Long
Public GPRSoff_H4         As Long
Public GPRSon_Min         As Long
Public GPRSon_H1          As Long
Public GPRSon_H2          As Long
Public GPRSon_H3          As Long
Public GPRSon_H4          As Long

'***   Zeitsteuerung Stromsparmode
Public PsGSMon_Min        As Long
Public PsGSMon_H1         As Long
Public PsGSMon_H2         As Long
Public PsGSMon_H3         As Long
Public PsGSMon_H4         As Long
Public PsGPRSon_Min       As Long
Public PsGPRSon_H1        As Long
Public PsGPRSon_H2        As Long
Public PsGPRSon_H3        As Long
Public PsGPRSon_H4        As Long
Public PsGSMoff_Min       As Long
Public PsGSMoff_H1        As Long
Public PsGSMoff_H2        As Long
Public PsGSMoff_H3        As Long
Public PsGSMoff_H4        As Long

'*** Zeitvariable
Dim    ActualTime(9)
 Alias ActualTime(1) = Year
 Alias ActualTime(2) = Month
 Alias ActualTime(3) = DayOfMonth
 Alias ActualTime(4) = hour
 Alias ActualTime(5) = minute
 Alias ActualTime(6) = second
 Alias ActualTime(7) = uSecond
 Alias ActualTime(8) = DayOfWeek
 Alias ActualTime(9) = DayOfYear

'*** Masseinheiten
Units TAIRact = deg_C
Units RHUMact = %
Units VWNDact = m/s
Units VWNDmax = m/s
Units Pluv10m = mm/10min
Units PluvSum = mm
Units DWNDact = deg
Units SRADact = W/m2
Units PARact  = umol/m2s
Units UVBact  = W/m2
Units VBATact = V
Units TLOGact = deg_C

'*** Hilfsvariablen
Dim    iCnt               As Long
Dim    ParameterArray(cnPARAMETER)
Dim    ConfStrings(cnSTRINGS) As String * 50

'**************************************************************************************
'*                                                                                    *
'*   D A T E N - T A B L E S                                                          *
'*                                                                                    *
'**************************************************************************************
DataTable (Meteo,FlagMeteoData,-1)
	DataInterval (0,cMETEOINT,Min,10)
  Sample(1,StationID,IEEE4)
	FieldNames("Stationskennung")
  Average(1,TAIRact,FP2,False)
	FieldNames("Lufttemperatur")
  Average(1,RHUMact,FP2,False)
	FieldNames("Luftfeuchtigkeit")
	WindVector(1,VWNDact,DWNDact,FP2,False,0,0,1)
  FieldNames("Windgeschwindigkeit, Windrichtung")
  Sample(1,VWNDmax,FP2)
	FieldNames("Windspitze")
  Sample(1,Pluv10m,FP2)
	FieldNames("Niederschlag")
  Sample(1,PluvSum,FP2)
	FieldNames("Niederschlagssumme")
  Average(1,SRADact,FP2,False)
	FieldNames("Globalstrahlung")
  Average(1,PARact,FP2,False)
	FieldNames("phot.akt.Strahlung")
  Average(1,UVBact,FP2,False)
	FieldNames("UVB_Strahlung")
	Average(1,VBATact,FP2,False)
	FieldNames("Batteriespannung")
	Average(1,TLOGact,FP2,False)
	FieldNames("Loggertemperatur")
	Sample(1,Quality,FP2)
	FieldNames("Qualitaet")
EndTable

DataTable (Konfiguration,FlagConfigData,50)
  Sample(1,StationID,IEEE4)
	FieldNames("Stationskennung")
  Sample(1,Status,IEEE4)
	FieldNames("Status")
  Sample(1,PluvCali,FP2)
	FieldNames("Faktor_PLUV")
  Sample(1,SRadCali,FP2)
	FieldNames("Faktor_SRAD")
  Sample(1,PARCali,FP2)
	FieldNames("Faktor_PAR")
  Sample(1,UVBCali,FP2)
	FieldNames("Faktor_UVB")
EndTable

'**************************************************************************************
'*                                                                                    *
'*   S U B R O U T I N E N                                                            *
'*                                                                                    *
'**************************************************************************************

'--------------------------------------------------------------------------------------
'-   SUBInitialize: Programm initialisieren   -----------------------------------------
Sub SUBInitialize
  ProgVers         = cPROGVERS
  FlagMeteoData    = True
  FlagConfigData   = True
  FlagBatSave      = False
  FlagForceMeasure = False
  FlagEnterStatus  = False
  FlagEnterConfig  = False
  FlagTimeSync     = False
  FlagPPPOpen      = False
  FlagPPPClose     = False
  pppOpenState     = False
  pppCloseSuccess  = PPPClose
  ' Programmparameter einlesen / initialisieren
  Call SUBReadConfig
  Call SUBInitStatus
  FlagInit         = 1
EndSub '---   End SUBInitialize   -----------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBDefaultParameter: Initialisierung mit Defaultwerten   -----------------------
Sub SUBDefaultParameter
  StationID        =       1   '* Stations-Identifikationsnummer
  StatusIn         =    1535   '* Status (binaere Sensorkonfiguration)
  PluvCali         =     0.2   '* Wippenvolumen Niederschlagssensor
  SRadCali         =     100   '* Kalibrationsfaktor SKS1110
  PARCali          =     100   '* Kalibrationsfaktor SKP 210/I
  UVBCali          = 6.66667   '* Kalibrationsfaktor SKU 430/I
  VBATlim          =    12.4   '* Grenzspannung fuer Batteriesparmode
  TcpPort          =    6788
  FTP_Delay        =       5
  GPRSoff_Min      =       0
  GPRSoff_H1       =       6
  GPRSoff_H2       =      10
  GPRSoff_H3       =      14
  GPRSoff_H4       =      18
  GPRSon_Min       =      20
  GPRSon_H1        =       6
  GPRSon_H2        =      10
  GPRSon_H3        =      14
  GPRSon_H4        =      18
  PsGSMon_Min      =       0
  PsGSMon_H1       =       6
  PsGSMon_H2       =      10
  PsGSMon_H3       =      14
  PsGSMon_H4       =      18
  PsGPRSon_Min     =      20
  PsGPRSon_H1      =       6
  PsGPRSon_H2      =      10
  PsGPRSon_H3      =      14
  PsGPRSon_H4      =      18
  PsGSMoff_Min     =      30
  PsGSMoff_H1      =       6
  PsGSMoff_H2      =      10
  PsGSMoff_H3      =      14
  PsGSMoff_H4      =      18
EndSub '---   End SUBDefaultParameter   -----------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBDefaultStrings: Initialisierung mit Defaultwerten   -------------------------
Sub SUBDefaultStrings
  FTP_IP           =  "ftp.wsl.ch"
  FTP_User         =  "username"
  FTP_Pwd          =  "password"
  FTPFileName      =  "WSL_Birmesndorf.dat"
  TcpAddress       =  "0.0.0.0"
EndSub   '---   End SUBDefaultStrings   -----------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBReadConfig: Einlesen der Programm-Konfiguration   ---------------------------
Sub SUBReadConfig
  Dim lUsrF(cnMAXUSRFILES) As String * 30
  Dim lIsP      As Boolean
  Dim lIsS      As Boolean
  Dim lNoF, lFn, lSF1

  lIsP = False
  lIsS = False
  lNoF = FileList("USR",lUsrF(1))
  For lFn = 1 To lNoF
    If StrComp(lUsrF(lFn),cPARAMETERFILE) = 0 Then
      Calfile(ParameterArray(),cnPARAMETER,cPARAMETERFILE,1)
      lIsP = True
    ElseIf StrComp(lUsrF(lFn),cSTRINGFILE) = 0 Then
      lSF1 = FileOpen (cSTRINGFILE,"r",0)
      FileRead(lSF1,ConfStrings(),cnSTRINGFILESIZE)
      FileClose(lSF1)
      lIsS = True            
    EndIf
  Next lFn
  If lIsP Then
    ' Sensor-Kalibrationswerte
    StationID        = ParameterArray(1)
    StatusIn         = ParameterArray(2)
    PluvCali         = ParameterArray(3)
    SRadCali         = ParameterArray(4)
    PARCali          = ParameterArray(5)
    UVBCali          = ParameterArray(6)
    VBATlim          = ParameterArray(7)
    TcpPort          = ParameterArray(19)
    FTP_Delay        = ParameterArray(20)
    GPRSoff_Min      = ParameterArray(21)
    GPRSoff_H1       = ParameterArray(22)
    GPRSoff_H2       = ParameterArray(23)
    GPRSoff_H3       = ParameterArray(24)
    GPRSoff_H4       = ParameterArray(25)
    GPRSon_Min       = ParameterArray(26)
    GPRSon_H1        = ParameterArray(27)
    GPRSon_H2        = ParameterArray(28)
    GPRSon_H3        = ParameterArray(29)
    GPRSon_H4        = ParameterArray(30)
    PsGSMon_Min      = ParameterArray(31)
    PsGSMon_H1       = ParameterArray(32)
    PsGSMon_H2       = ParameterArray(33)
    PsGSMon_H3       = ParameterArray(34)
    PsGSMon_H4       = ParameterArray(35)
    PsGPRSon_Min     = ParameterArray(36)
    PsGPRSon_H1      = ParameterArray(37)
    PsGPRSon_H2      = ParameterArray(38)
    PsGPRSon_H3      = ParameterArray(39)
    PsGPRSon_H4      = ParameterArray(40)
    PsGSMoff_Min     = ParameterArray(41)
    PsGSMoff_H1      = ParameterArray(42)
    PsGSMoff_H2      = ParameterArray(43)
    PsGSMoff_H3      = ParameterArray(44)
    PsGSMoff_H4      = ParameterArray(45)
  Else
    Call SUBDefaultParameter
    Call SUBWriteParameter
  EndIf
  If lIsS Then
    FTP_IP           =  ConfStrings(1)
    FTP_User         =  ConfStrings(2)
    FTP_Pwd          =  ConfStrings(3)
    FTPFileName      =  ConfStrings(4)
    TcpAddress       =  ConfStrings(5)
  Else
    Call SUBDefaultStrings
    Call SUBWriteStrings
  EndIf    
EndSub '---   End SUBReadConfig   -----------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBWriteParameter: Programmparameter ins CAL-File schreiben   ------------------
Sub SUBWriteParameter
  ParameterArray(1)  = StationID
  ParameterArray(2)  = StatusIn
  ParameterArray(3)  = PluvCali
  ParameterArray(4)  = SRadCali
  ParameterArray(5)  = PARCali
  ParameterArray(6)  = UVBCali
  ParameterArray(7)  = VBATlim
  ParameterArray(19) = TcpPort
  ParameterArray(20) = FTP_Delay
  ParameterArray(21) = GPRSoff_Min
  ParameterArray(22) = GPRSoff_H1
  ParameterArray(23) = GPRSoff_H2
  ParameterArray(24) = GPRSoff_H3
  ParameterArray(25) = GPRSoff_H4
  ParameterArray(26) = GPRSon_Min
  ParameterArray(27) = GPRSon_H1
  ParameterArray(28) = GPRSon_H2
  ParameterArray(29) = GPRSon_H3
  ParameterArray(30) = GPRSon_H4
  ParameterArray(31) = PsGSMon_Min
  ParameterArray(32) = PsGSMon_H1
  ParameterArray(33) = PsGSMon_H2
  ParameterArray(34) = PsGSMon_H3
  ParameterArray(35) = PsGSMon_H4
  ParameterArray(36) = PsGPRSon_Min
  ParameterArray(37) = PsGPRSon_H1
  ParameterArray(38) = PsGPRSon_H2
  ParameterArray(39) = PsGPRSon_H3
  ParameterArray(40) = PsGPRSon_H4
  ParameterArray(41) = PsGSMoff_Min
  ParameterArray(42) = PsGSMoff_H1
  ParameterArray(43) = PsGSMoff_H2
  ParameterArray(44) = PsGSMoff_H3
  ParameterArray(45) = PsGSMoff_H4
  '***   Parameter schreiben
  Calfile (ParameterArray(),cnPARAMETER,cPARAMETERFILE,0)
  FlagConfigData  = True
  FlagEnterConfig = False
EndSub '---   End SUBWriteParameter   -------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBWriteStrings: Programmparameter ins TXT-File schreiben   --------------------
Sub SUBWriteStrings
  Dim lSF2
  
  ConfStrings(1) = FTP_IP
  ConfStrings(2) = FTP_User
  ConfStrings(3) = FTP_Pwd
  ConfStrings(4) = FTPFileName
  ConfStrings(5) = TcpAddress
  lSF2 = FileOpen (cSTRINGFILE,"w",0)
  FileWrite(lSF2,ConfStrings(),cnSTRINGFILESIZE)
  FileClose(lSF2)
  FlagConfigData  = True
  FlagEnterConfig = False
EndSub '---   End SUBWriteStrings   ---------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBCheckRange: range check to set status value   -------------------------------
Sub SUBCheckRange(lVal, lMin, lMax, lStatInd)
  If Status(lStatInd) >= 1 Then
    If (lVal > lMax) OR (lVal < lMin) OR (lVal = NAN) Then
      Status(lStatInd) = Status(lStatInd) + 1
    EndIf
  EndIf
EndSub '---   End SUBCheckRange   -----------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBEnterStatus: enter changed Status(n)-values and calculate StatusIn   --------
Sub SUBEnterStatus
  Dim k1
  
  StatusIn = 0 
  For k1 = 1 To cnSTATUS
    If Status(k1) >= 1 Then
      StatusIn = StatusIn + INT(2^(k1-1)+0.3)
    EndIf
  Next k1
  FlagEnterStatus = False
EndSub '---   End SUBEnterStatus   ----------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBInitStatus: Statuswerte aus binaerem Status initialisieren   ----------------
Sub SUBInitStatus
  Dim k2
  
  For k2 = 1 To cnSTATUS
    If ((StatusIn MOD (2^k2)) > (2^(k2-1)-0.5)) Then
      Status(k2) = 1
    Else
      Status(k2) = 0
    EndIf
  Next k2
EndSub '---   End SUBInitStatus   -----------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBQuality: calculate binary quality from status values   ----------------------
Sub SUBQuality
  Dim k3
  
  Quality = 0
  For k3 = 1 To cnSTATUS
    If Status(k3) >= 2 Then
      Quality = Quality + INT(2^(k3-1)+0.3)
    EndIf
  Next k3
  Call SUBInitStatus
EndSub '---   End SUBQuality   --------------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBGSM: Steuerung des GSM-/GPRS-Modems   ---------------------------------------
Sub SUBGSM
  If FlagBatSave Then
    '---   im Stromsparmode GSM-Modem eingeschaltet wahrend vier Zeitfenstern:
    '---   Default: 06:00-06:30 / 10:00-10:30 / 14:00-14:30 / 18:00-18:30
    '---            CSD: hh:00 - hh:20   /   GPRS: hh:20 - hh:30
    If minute = PsGSMon_Min Then
      If hour = PsGSMon_H1 OR hour = PsGSMon_H2 OR hour = PsGSMon_H3 OR hour = PsGSMon_H4 Then
        Call SUBGSMon
      EndIf
    ElseIf minute = PsGPRSon_Min Then
      If hour = PsGPRSon_H1 OR hour = PsGPRSon_H2 OR hour = PsGPRSon_H3 OR hour = PsGPRSon_H4 Then
        FlagPPPOpen = True
        FlagTCPOpen = True
      EndIf
    ElseIf minute = PsGSMoff_Min Then
      If hour = PsGSMoff_H1 OR hour = PsGSMoff_H2 OR hour = PsGSMoff_H3 OR hour = PsGSMoff_H4 Then
        Call SUBGSMoff
      EndIf
    EndIf
  Else
    '---   ohne Stromsparmode Reset taeglich um 11:57 Uhr
    If TimeIntoInterval(cGSMRESET,1440,Min) Then
      Call SUBGSMoff
    ElseIf TimeIntoInterval(cGSMRESET+1,1440,Min) Then
      Call SUBGSMon
    ElseIf TimeIntoInterval(cGSMRESET+2,1440,Min) Then
      FlagPPPOpen = True
      FlagTCPOpen = True
    '---   TCP-CallBack-Verbindung stuendlich schliessen und neu oeffnen
    ElseIf TimeIntoInterval(58,60,Min) Then
      FlagTCPClose = True
    ElseIf TimeIntoInterval(59,60,Min) Then
      FlagTCPOpen = True
    EndIf
    '---   ohne Stromsparmode GPRS-Verbindung geschlossen waehrend vier Zeitfenstern:
    '---   Default: 06:00-06:20 / 10:00-10:20 / 14:00-14:20 / 18:00-18:20
    If minute = GPRSoff_Min Then
      If hour = GPRSoff_H1 OR hour = GPRSoff_H2 OR hour = GPRSoff_H3 OR hour = GPRSoff_H4 Then
        FlagTCPClose = True
        FlagPPPClose = True
      EndIf
    ElseIf minute = GPRSon_Min Then
      If hour = GPRSon_H1 OR hour = GPRSon_H2 OR hour = GPRSon_H3 OR hour = GPRSon_H4 Then
        FlagPPPOpen = True
        FlagTCPOpen = True
      EndIf
    EndIf
  EndIf
  '---   Zeitsynchronisation durch NTP-Server
  If TimeIntoInterval(0,1440,Min) Then
    FlagTimeSync = True
  EndIf
EndSub '---   End SUBGSM   ------------------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBGSMOn: GSM-Modem einschalten   ----------------------------------------------
Sub SUBGSMOn
  SW12(0)
EndSub '---   End SUBGSMon   ----------------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBGSMOff: GSM-Modem ausschalten   ---------------------------------------------
Sub SUBGSMoff
  If TCPSocket <> 0 Then
    TCPClose(TCPSocket)
    TCPOpenState = False
    TCPSocket    = 0
  EndIf
  pppCloseSuccess = PPPClose
  SerialOpen(ComRS232,cBAUDRATE,0,100,100)
  SerialFlush(ComRS232)
  Delay(1,200,mSec)
  SerialOut(ComRS232,"AT^SMSO" + CHR(13) + CHR(10),"",0,0)
  SerialClose(ComRS232)
  Delay(1,2,Sec)
  SW12(1)
EndSub '---   End SUBGSMoff   ---------------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBConfigGSM: Seriell-Befehle an GSM-Modem (RS232, 115200 baud)   --------------
Sub SUBConfigGSM
  Dim i As Long
  
  SerialOpen(ComRS232,cBAUDRATE,0,100,100)
  Delay(1,200,mSec)
  SerialFlush(ComRS232)
  SerialOut(ComRS232,GSMCommandString & CHR(13),"",1,10)
  GSMAnswer = ""
  For i = 1 To 10
    SerialIn(SerialInput,ComRS232,100,13,100)
    GSMAnswer = GSMAnswer & SerialInput
  Next i
  SerialFlush(ComRS232)
  SerialClose(ComRS232)
EndSub '---   End SUBConfigGSM   ------------------------------------------------------

'--------------------------------------------------------------------------------------
'---   SUBCheckIP: GPRS-Verbindung und aktuelle IP-Adresse checken   ------------------
Function CheckIP As Boolean
  pppIPInfo = Status.IPInfo(1,1)
  SplitStr(pppIP,pppIPInfo,"PPP IP: ",1,4)
  SplitStr(pppIPAddress,pppIP,CHR(10) & CHR(13),1,7)
  If Len(pppIPAddress) > 0 AND pppIPAddress <> "0.0.0.0" Then
    CheckIP = True
  Else
    CheckIP = False
  EndIf
EndFunction '---   End CheckIP   ------------------------------------------------------


'**************************************************************************************
'*                                                                                    *
'*   H A U P T P R O G R A M M                                                        *
'*                                                                                    *
'**************************************************************************************
BeginProg
	Scan (cPROGSCAN,Sec,0,0)
	  RealTime(ActualTime)
    If FlagInit = 0 Then Call SUBInitialize
    If FlagEnterStatus Then Call SUBEnterStatus
    If FlagEnterConfig Then 
      Call SUBWriteParameter
      Call SUBWriteStrings
    EndIf
    
    '---   Einschalten Hygroclip HC2-S3 und SKU 430 (C6)
    If FlagForceMeasure Then
      PortSet(6,1)
    ElseIf TimeIntoInterval(55,60,Sec) Then
      PortSet(6,1)
    EndIf
    If TimeIntoInterval(0,30,Min) Then
      FlagForceMeasure = False
    EndIf
    
    '---   Systemmessungen und GSM-Steuerung   ----------------------------------------   
 	  If TimeIntoInterval(0,60,Sec) Then
   	  Battery(VBATact)
   	  AvgRun(VBATmean,1,VBATact,30)
      If TimeIntoInterval(300,1440,Min) Then
        VBAT5h = VBATmean
        If VBAT5h > VBATlim Then
          FlagBatSave = False
        Else
          FlagBatSave = True
        EndIf
      EndIf
      PanelTemp(TLOGact,250)
      Call SUBGSM
    EndIf
    If FlagConfigGSM > 0 Then
      FlagConfigGSM = FlagConfigGSM - cPROGSCAN
      If FlagConfigGSM <= 0 Then
        FlagConfigGSM = 0
        Call SUBConfigGSM
      EndIf
    EndIf

    '---   Meteomessungen (5 Sekunden)   ----------------------------------------------
    '---   Windgeschwindigkeit (Campbell A100R: P1)
    If StatVWND >= 1 Then
      PulseCount(VWNDact,1,1,2,1,1.25,0)
      Call SUBCheckRange(VWNDact,0,70,cstVWND)
      If VWNDact > VWNDmax Then
        VWNDmax = VWNDact
      EndIf
    Else
      VWNDact = cSensorOff
      VWNDmax = cSensorOff
    EndIf
    '---   Windrichtung (Campbell W200P: SE4, Ex2)
    If StatDWND >= 1 Then
      BrHalf(DWNDact,1,mV2500,4,Vx2,1,2500,False,20000,250,357,0)
      Call SUBCheckRange(DWNDact,-1,361,cstDWND)
    Else
      DWNDact = cSensorOff
    EndIf
    '---   Niederschlag (Campbell ARG100: P2)
    If StatPLUV >= 1 Then
      PulseCount(PLUVact,1,2,2,0,PluvCali,0)
      PluvSum = PluvSum + PLUVact
      Pluv10m = Pluv10m + PLUVact
    Else
      PLUVact = cSensorOff
      PluvSum = cSensorOff
      Pluv10m = cSensorOff
    EndIf

    '---   Meteomessungen (60 Sekunden)   ---------------------------------------------
    If TimeIntoInterval(0,60,Sec) OR FlagForceMeasure Then
      '---   Lufttemperatur und -feuchte (Rotronic Hygroclip HC2-S3:  SE3/2, C6)
      If StatTARH >= 1 Then
        VoltSe(TAIRact,1,mv2500,3,False,0,_50Hz,0.1,-40)
        VoltSe(RHUMact,1,mv2500,2,False,0,_50Hz,0.1,0)      
        Call SUBCheckRange(TAIRact,-40,50,cstTARH)
        Call SUBCheckRange(RHUMact,0,100,cstTARH)
      Else
        TAIRact = cSensorOff
        RHUMact = cSensorOff
      EndIf

      '---   kurzwellige Strahlung (SKS1110: SE7)
      If StatSRAD >= 1 Then
        VoltSe(SRADact,1,mV25,7,False,0,250,SRadCali,0)
        SUBCheckRange(SRADact,0,2000,cstSRAD)
      Else
        SRADact = cSensorOff
      EndIf

      '---   photosynthetisch aktive Strahlung (SKP 210/I: SE8)
      If StatPAR >= 1 Then
        VoltSe(PARact,1,mV250,8,False,0,250,PARCali,0)
        SUBCheckRange(PARact,0,10000,cstPAR)
      Else
        PARact = cSensorOff
      EndIf

      '---   Ultraviolett-B Strahlung (SKU 430/I: Diff3)
      If StatUVB >= 1 Then
        VoltDiff(UVBact,1,mV2500,3,False,0,250,UVBCali,0)
        SUBCheckRange(UVBact,0,10000,cstUVB)
      Else
        UVBact = cSensorOff
      EndIf

      '---   Speisung Hygroclip und SKU 430 ausschalten
      If NOT FlagForceMeasure Then
        PortSet(6,0)
      EndIf
    EndIf

    '---   Messungen mit den beiden Multiplexer Mux1 / Mux2 (10 Minuten)   ------------
    If TimeIntoInterval(0,10,Min) Then
      '---   Multiplexer 1 aktivieren
'     PortSet(2,1)
      '---   Multiplexer durchschalten:
      For iCnt = 1 To 0
        PulsePort(1,10000)
        '!!!   MESSUNG VON SENSOREN AM MULTIPLEXER 1 (SE9 ... SE12)   !!!!!!!!!!!!!!!!
        ' . . .
      Next iCnt
      '---   Mulitplexer 1 deaktivieren
      PortSet(2,0)
    EndIf

    If TimeIntoInterval(0,10,Min) Then
      '---   Multiplexer 2 aktivieren
'     PortSet(4,1)
      '---   Multiplexer durchschalten:
      For iCnt = 1 To 0
        PulsePort(3,10000)
        '!!!   MESSUNG VON SENSOREN AM MULTIPLEXER 2 (SE13 ... SE16)   !!!!!!!!!!!!!!!
        ' . . .
      Next iCnt
      '---   Mulitplexer 2 deaktivieren
      PortSet(4,0)
    EndIf

    '---   Daten-Ablage   -------------------------------------------------------------
    If TimeIntoInterval(0,cMETEOINT,Min) Then
      Call SUBQuality
    EndIf
		CallTable Meteo
    CallTable Konfiguration
    FlagConfigData = False

    '---   FTP Datentransfer vorbereiten   --------------------------------------------
    If StatFTP >= 1 Then
      If TimeIntoInterval(0,cMETEOINT,Min) Then
        TAIR    = Meteo.Lufttemperatur(1,1)
        RHUM    = Meteo.Luftfeuchtigkeit(1,1)
        VWND    = Meteo.Windgeschwindigkeit(1,1)
        DWND    = Meteo.Windrichtung(1,1)
        SRAD    = Meteo.Globalstrahlung(1,1)
        PAR     = Meteo.phot.akt.Strahlung(1,1)
        UVB     = Meteo.UVB_Strahlung(1,1)
        VBAT    = Meteo.Batteriespannung(1,1)
        TLOG    = Meteo.Loggertemperatur(1,1)
        If StatTARH = 0 Then
          TAIR = cSensorOff
          RHUM = cSensorOff
        EndIf
        If StatVWND = 0 Then
          VWND = cSensorOff
          VWNDmax = cSensorOff
        EndIf
        If StatDWND = 0 Then
          DWND = cSensorOff
        EndIf
        If StatSRAD = 0 Then
          SRAD = cSensorOff
        EndIf
        If StatPAR = 0 Then
          PAR = cSensorOff
        EndIf
        If StatUVB = 0 Then
          UVB = cSensorOff
        EndIf        
        '- Datenzeile ins lokale Datenfile schreiben
        DataLine = FormatFloat(DayOfMonth,"%02.0f") & "."
        DataLine = DataLine & FormatFloat(Month,"%02.0f") & "."
        DataLine = DataLine & FormatFloat(Year,"%04.0f") & " "
        DataLine = DataLine & FormatFloat(hour,"%02.0f") & ":"
        DataLine = DataLine & FormatFloat(minute,"%02.0f") & ","
        DataLine = DataLine & FormatFloat(StationID,"%.0f") & "," 
        DataLine = DataLine & TAIR & "," & RHUM & "," & VWND & ","
        DataLine = DataLine & DWND & "," & VWNDmax & "," & Pluv10m & ","
        DataLine = DataLine & PluvSum & "," & SRAD & "," & PAR & "," & UVB
        DataLine = DataLine & VBAT & "," & TLOG & "," & Quality & CHR(10)
        DataFile = FileOpen(cDataFileName,"a",-1)
        FileWrite(DataFile,DataLine,0)
        FileClose(DataFile)
      EndIf
      If TimeIntoInterval(FTP_Delay,cMETEOINT,Min) Then
        '---   FTP-Transfer initialisieren
        FTPSendSuccess = False
        FlagFTP        = True
      EndIf
    EndIf
    
    '---   Reset der Meteo-Werte   ----------------------------------------------------
    If TimeIntoInterval(0,cMETEOINT,Min) Then
      Pluv10m = 0
      VWNDmax = 0
    EndIf
    If TimeIntoInterval(0,1440,Min) Then
      '---   Reset der laufenden Jahres-Niederschlagssumme jeweils am 1. Mai
      If Month = 5 AND DayOfMonth = 1 Then
        PluvSum = 0
      EndIf
    EndIf
	NextScan

'**************************************************************************************
'***																																								***
'***   F T P - D A T E N T R A N S F E R    			  																***
'***																																						    ***
'**************************************************************************************
  SlowSequence
  Scan(60,Sec,5,0)
    Dim lUsrFF(cnMAXUSRFILES) As String * 30
    Dim lNFF, lFF
    
    '---   testen, ob GPRS-Verbindung besteht   ---------------------------------------
    PPPOpenState = CheckIP()
    If NOT pppOpenState Then
      If StatFTP + StatTCP >= 1 AND FlagPPPOpen Then
        pppOpenResult = PPPOpen
      EndIf
    EndIf
    FlagPPPOpen = False
    Delay(1,2,Sec)
    pppOpenState = CheckIP()
    If pppOpenState Then
      '---   Zeitsynchronisation mit "pool.ntp.org"   ---------------------------------
      If StatNTP >= 1 AND FlagTimeSync Then
        NTPOffset    = NetworkTimeProtocol ("pool.ntp.org",3600,1000)
        Delay(1,10,Sec)
      EndIf
      FlagTimeSync = False
      '---   Datenfile per FTP schicken   ---------------------------------------------
      If FlagFTP Then
        lNFF = FileList("USR",lUsrFF(1))
        For lFF = 1 To lNFF
          If StrComp(lUsrFF(lFF),cDataFileName) = 0 Then
            ' FTP Datenuebertragung (nur ein Versuch, bei Misserfolg File stehenlassen)
            If FTPClient(FTP_IP,FTP_User,FTP_Pwd,cDataFileName,FTPFileName,cFTP_Mode) Then
              FileManage(cDataFileName,8)
              FTPSendSuccess = True
            EndIf
          EndIf
        Next lFF
        FlagFTP = False
      EndIf
      '---   TCP-Callback-Verbindung auf Erfassungsrechner oeffnen   ------------------
      If StatTCP >= 1 AND FlagTCPOpen Then
        TCPSocket = TCPOpen(TcpAddress,TcpPort,0)
        If TCPSocket <> 0 Then 
          TCPOpenState = True
        EndIf
      EndIf
      FlagTCPOpen = False
    EndIf
    '---   TCP-Callback-Verbindung schliessen   ---------------------------------------
    If FlagTCPClose OR FlagPPPClose Then
      If TCPSocket <> 0 Then
        TCPClose(TCPSocket)
      EndIf
      TCPOpenState = False
      TCPSocket    = 0
      FlagTCPClose = False
    EndIf
    '---   GPRS-Verbindung schliessen   -----------------------------------------------
    If FlagPPPClose Then
      pppCloseSuccess = PPPClose
      FlagPPPClose = False
      Delay(1,2,Sec)
      pppOpenState = CheckIP()
    EndIf
  Next Scan
EndProg

